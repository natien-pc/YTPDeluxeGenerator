# -*- coding: utf-8 -*-
# Verifier for keys generated by gen_beta_key.py
from __future__ import print_function
import hmac
import hashlib
import time
import sys

def verify_signed_key(key, secret):
    # key format: BETA|USER|EXP|RANDHEX|HMACHEX
    try:
        parts = key.strip().split('|')
        if len(parts) != 5 or parts[0] != 'BETA':
            return False, "Bad format"
        _, user, exp_s, randhex, mac = parts
        payload = "|".join([user, exp_s, randhex])
        expected = hmac.new(secret.encode('utf-8'), payload.encode('utf-8'), hashlib.sha256).hexdigest()
        if not hmac.compare_digest(expected, mac):
            return False, "HMAC mismatch"
        exp = int(exp_s)
        if exp != 0 and time.time() > exp:
            return False, "Key expired"
        return True, "OK (user=%s, expires=%s)" % (user, 'never' if exp==0 else time.ctime(exp))
    except Exception as e:
        return False, "Error: %s" % e

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Usage: python verify_beta_key.py <key-string-or-file> <secret>")
        sys.exit(1)
    key_in = sys.argv[1]
    secret = sys.argv[2]
    # if first arg is a filename, read it
    try:
        import os
        if os.path.exists(key_in):
            with open(key_in, 'r') as f:
                key = f.read().strip()
        else:
            key = key_in
    except Exception:
        key = key_in
    ok, msg = verify_signed_key(key, secret)
    print(ok, msg)